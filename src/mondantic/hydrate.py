from pydantic import BaseModel
from typing import Iterable, Type
import requests

# This was mostly generated by the query_builder.py script,
# however some bugs in the GraphQL API were fixed manually.
HYDRATE_QUERY = """
query ($board_id: ID!) {
  boards(ids: [$board_id]) {
    items_page {
      items {
        column_values {
          id
          text
          type
          value
          ... on BoardRelationValue {
            display_value
            linked_items {
              id
            }
            updated_at
          }
          ... on ButtonValue {
            color
            label
          }
          ... on CheckboxValue {
            checked
            updated_at
          }
          ... on ColorPickerValue {
            color
            updated_at
          }
          ... on CountryValue {
            country {
              code
              name
            }
            updated_at
          }
          ... on CreationLogValue {
            created_at
            creator {
              id
              account {
                name
              }
            }
            creator_id
          }
          ... on DateValue {
            date
            icon
            time
            updated_at
          }
          ... on DependencyValue {
            display_value
            linked_items {
              id
              board {
                id
              }
            }
            updated_at
          }
          ... on DocValue {
            file {
              file_id
              url
            }
          }
          ... on DropdownValue {
            values {
              id
              label
            }
          }
          ... on EmailValue {
            email
            label
            updated_at
          }
          ... on FileValue {
            files {
              __typename
            }
          }
          ... on GroupValue {
            group {
              archived
              color
              deleted
              id
              position
              title
            }
          }
          ... on HourValue {
            hour
            minute
            updated_at
          }
          ... on IntegrationValue {
            entity_id
            issue_api_url
            issue_id
          }
          ... on ItemIdValue {
            item_id
          }
          ... on LastUpdatedValue {
            updated_at
          }
          ... on LinkValue {
            updated_at
            url
            url_text
          }
          ... on LocationValue {
            address
            city
            city_short
            country_short
            lat
            lng
            place_id
            street
            street_number
            street_number_short
            street_short
            updated_at
          }
          ... on LongTextValue {
            updated_at
          }
          ... on MirrorValue {
            display_value
            mirrored_items {
              linked_board_id
            }
          }
          ... on NumbersValue {
            direction
            number
            symbol
          }
          ... on PeopleValue {
            persons_and_teams {
              id
              kind
            }
            updated_at
          }
          ... on PersonValue {
            person_id
            updated_at
          }
          ... on PhoneValue {
            country_short_name
            phone
            updated_at
          }
          ... on RatingValue {
            rating
            updated_at
          }
          ... on StatusValue {
            index
            is_done
            label
            label_style {
              border
              color
            }
            update_id
            updated_at
          }
          ... on SubtasksValue {
            display_value
            subitems {
              name
              id
            }
          }
          ... on TagsValue {
            tags {
              id
              color
              name
            }
          }
          ... on TeamValue {
            team_id
            updated_at
          }
          ... on TimeTrackingValue {
            duration
            running
            started_at
            updated_at
          }
          ... on TimelineValue {
            to
            updated_at
            visualization_type
          }
          ... on VoteValue {
            updated_at
            vote_count
            voters {
              id
              account {
                name
              }
            }
          }
          ... on WeekValue {
            end_date
            start_date
          }
          ... on WorldClockValue {
            timezone
            updated_at
          }
        }
      }
    }
  }
}
"""

def hydrate[T: BaseModel](cls: Type[T], api_key: str) -> Iterable[T]:
    """
    Yields instances of the given Pydantic model from the Monday.com API.
    The board's ID is obtained from the model's class attribute `board_id`.
    """
    res = requests.post(
        "https://api.monday.com/v2",
        json={
            "query": HYDRATE_QUERY,
            "variables": {"board_id": cls.board_id},
        },
        headers={"Authorization": api_key, "API-Version": "2023-04"},
    )
    if res.status_code != 200:
      raise ValueError(f"Failed to fetch data from Monday.com API: {res.text}")
    parsed = res.json()
    for row in parsed["data"]["boards"][0]["items_page"]["items"]:
        model_json = { col["id"]: col for col in row["column_values"] }
        yield cls.model_validate(model_json)
